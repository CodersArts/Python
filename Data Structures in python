what is going on guys my name is jitendra and welcome to very first tutorial in Python Data structures.
if you guys are wondering what Data structures is , it not's movie..bu tin this tutorial i am going to teach 
you guys about python data structures.
intro............


5.1. More on Lists
=====================================================================================
Important methods on the list data type. Here are all of the methods of list objects:

list.append(x): 
Add an item to the end of the list. Equivalent to a[len(a):] = [x].

list.extend(iterable):
Extend the list by appending all the items from the iterable. Equivalent to a[len(a):] = iterable.

list.insert(i, x)
Insert an item at a given position. The first argument is the index of the element before which to insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x).

list.remove(x)
Remove the first item from the list whose value is x. It is an error if there is no such item.

list.pop([i])
Remove the item at the given position in the list, and return it. If no index is specified, a.pop() removes and returns the last item in the list. (The square brackets around the i in the method signature denote that the parameter is optional, not that you should type square brackets at that position. You will see this notation frequently in the Python Library Reference.)

list.clear()
Remove all items from the list. Equivalent to del a[:].

list.index(x[, start[, end]])
Return zero-based index in the list of the first item whose value is x. Raises a ValueError if there is no such item.

The optional arguments start and end are interpreted as in the slice notation and are used to limit the search to a particular subsequence of the list. The returned index is computed relative to the beginning of the full sequence rather than the start argument.

list.count(x)
Return the number of times x appears in the list.

list.sort(key=None, reverse=False)
Sort the items of the list in place (the arguments can be used for sort customization, see sorted() for their explanation).

list.reverse()
Reverse the elements of the list in place.

list.copy()
Return a shallow copy of the list. Equivalent to a[:].



============================================================================
An example that uses most of the list methods:

>>>
>>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana']
>>> fruits.count('apple')
2
>>> fruits.count('tangerine')
0
>>> fruits.index('banana')
3
>>> fruits.index('banana', 4)  # Find next banana starting a position 4
6
>>> fruits.reverse()
>>> fruits
['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange']

>>> fruits.append('grape')
>>> fruits
['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape']

>>> fruits.sort()
>>> fruits
['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear']
>>> fruits.pop()
'pear'

-----------------------------------------------------------
You might have noticed that methods like insert, remove or sort that only modify the list have no return value printed â€“ they return the default None.
This is a design principle for all mutable data structures in Python.

==================================================
End
==============================================

i hope you have Django installed correctly if you have any question then go ahead and  just leave a comment below
i'm sure that you know a bunch of people are willing to help you out
if not then you can ask in my forum and there's a link below this video to get there so yeah there you go in the next video
we're going to be learning how to set up a jingo project..
